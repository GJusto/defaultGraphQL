/* tslint:disable */
/* eslint-disable */
/**
 * Diana
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {Country}
     * @memberof Address
     */
    country: Country;
    /**
     * 
     * @type {State}
     * @memberof Address
     */
    state: State;
    /**
     * 
     * @type {City}
     * @memberof Address
     */
    city: City;
    /**
     * 
     * @type {Neighborhood}
     * @memberof Address
     */
    neighborhood: Neighborhood;
    /**
     * 
     * @type {StreetName}
     * @memberof Address
     */
    street_name: StreetName;
    /**
     * 
     * @type {Number}
     * @memberof Address
     */
    number: Number;
    /**
     * 
     * @type {ZipCode}
     * @memberof Address
     */
    zip_code: ZipCode;
    /**
     * 
     * @type {Complement}
     * @memberof Address
     */
    complement?: Complement;
}
/**
 * 
 * @export
 * @interface Answer
 */
export interface Answer {
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    question_order_id: number;
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    answer_option_id: number;
}
/**
 * 
 * @export
 * @interface BirthDate
 */
export interface BirthDate {
    /**
     * 
     * @type {string}
     * @memberof BirthDate
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof BirthDate
     */
    value: number;
}
/**
 * 
 * @export
 * @interface BirthPlaceCity
 */
export interface BirthPlaceCity {
    /**
     * 
     * @type {string}
     * @memberof BirthPlaceCity
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof BirthPlaceCity
     */
    value: number;
}
/**
 * 
 * @export
 * @interface BirthPlaceCountry
 */
export interface BirthPlaceCountry {
    /**
     * 
     * @type {string}
     * @memberof BirthPlaceCountry
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof BirthPlaceCountry
     */
    value: string;
}
/**
 * 
 * @export
 * @interface BirthPlaceState
 */
export interface BirthPlaceState {
    /**
     * 
     * @type {string}
     * @memberof BirthPlaceState
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof BirthPlaceState
     */
    value: string;
}
/**
 * 
 * @export
 * @interface BrokerMemberRequest
 */
export interface BrokerMemberRequest {
    /**
     * 
     * @type {boolean}
     * @memberof BrokerMemberRequest
     */
    exchange_member: boolean;
}
/**
 * 
 * @export
 * @interface City
 */
export interface City {
    /**
     * 
     * @type {string}
     * @memberof City
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof City
     */
    value: number;
}
/**
 * 
 * @export
 * @interface CompanyDirectorUsRequest
 */
export interface CompanyDirectorUsRequest {
    /**
     * 
     * @type {boolean}
     * @memberof CompanyDirectorUsRequest
     */
    is_company_director: boolean;
    /**
     * 
     * @type {string}
     * @memberof CompanyDirectorUsRequest
     */
    company_name: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDirectorUsRequest
     */
    company_ticker: string;
}
/**
 * 
 * @export
 * @interface Complement
 */
export interface Complement {
    /**
     * 
     * @type {string}
     * @memberof Complement
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Complement
     */
    value: string;
}
/**
 * 
 * @export
 * @interface ComplementaryDataRequest
 */
export interface ComplementaryDataRequest {
    /**
     * 
     * @type {number}
     * @memberof ComplementaryDataRequest
     */
    marital_status: number;
    /**
     * 
     * @type {Spouse}
     * @memberof ComplementaryDataRequest
     */
    spouse: Spouse;
}
/**
 * 
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    value: string;
}
/**
 * 
 * @export
 * @interface Cpf
 */
export interface Cpf {
    /**
     * 
     * @type {string}
     * @memberof Cpf
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Cpf
     */
    value: string;
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    nick_name: string;
}
/**
 * 
 * @export
 * @interface Documents
 */
export interface Documents {
    /**
     * 
     * @type {Cpf}
     * @memberof Documents
     */
    cpf: Cpf;
    /**
     * 
     * @type {IdentityType}
     * @memberof Documents
     */
    identity_type: IdentityType;
    /**
     * 
     * @type {IdentityNumber}
     * @memberof Documents
     */
    identity_number: IdentityNumber;
    /**
     * 
     * @type {ExpeditionDate}
     * @memberof Documents
     */
    expedition_date: ExpeditionDate;
    /**
     * 
     * @type {Issuer}
     * @memberof Documents
     */
    issuer: Issuer;
    /**
     * 
     * @type {State}
     * @memberof Documents
     */
    state: State;
}
/**
 * 
 * @export
 * @interface Email
 */
export interface Email {
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    value: string;
}
/**
 * 
 * @export
 * @interface EmployForUsRequest
 */
export interface EmployForUsRequest {
    /**
     * 
     * @type {string}
     * @memberof EmployForUsRequest
     */
    user_employ_status: string;
    /**
     * 
     * @type {string}
     * @memberof EmployForUsRequest
     */
    user_employ_type: string;
    /**
     * 
     * @type {string}
     * @memberof EmployForUsRequest
     */
    user_employ_position: string;
    /**
     * 
     * @type {string}
     * @memberof EmployForUsRequest
     */
    user_employ_company_name: string;
}
/**
 * 
 * @export
 * @interface ExpeditionDate
 */
export interface ExpeditionDate {
    /**
     * 
     * @type {string}
     * @memberof ExpeditionDate
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof ExpeditionDate
     */
    value: number;
}
/**
 * 
 * @export
 * @interface ExternalExchangeAccountUs
 */
export interface ExternalExchangeAccountUs {
    /**
     * 
     * @type {IsPoliticallyExposed}
     * @memberof ExternalExchangeAccountUs
     */
    is_politically_exposed: IsPoliticallyExposed;
    /**
     * 
     * @type {IsExchangeMember}
     * @memberof ExternalExchangeAccountUs
     */
    is_exchange_member: IsExchangeMember;
    /**
     * 
     * @type {TimeExperience}
     * @memberof ExternalExchangeAccountUs
     */
    time_experience: TimeExperience;
    /**
     * 
     * @type {IsCompanyDirector}
     * @memberof ExternalExchangeAccountUs
     */
    is_company_director: IsCompanyDirector;
    /**
     * 
     * @type {IsCompanyDirectorOf}
     * @memberof ExternalExchangeAccountUs
     */
    is_company_director_of: IsCompanyDirectorOf;
    /**
     * 
     * @type {UserEmployStatus}
     * @memberof ExternalExchangeAccountUs
     */
    user_employ_status: UserEmployStatus;
    /**
     * 
     * @type {UserEmployType}
     * @memberof ExternalExchangeAccountUs
     */
    user_employ_type: UserEmployType;
    /**
     * 
     * @type {UserEmployPosition}
     * @memberof ExternalExchangeAccountUs
     */
    user_employ_position: UserEmployPosition;
    /**
     * 
     * @type {UserEmployCompanyName}
     * @memberof ExternalExchangeAccountUs
     */
    user_employ_company_name: UserEmployCompanyName;
}
/**
 * 
 * @export
 * @interface ExternalFisicalTaxConfirmationRequest
 */
export interface ExternalFisicalTaxConfirmationRequest {
    /**
     * 
     * @type {Array<TaxResidence>}
     * @memberof ExternalFisicalTaxConfirmationRequest
     */
    tax_residences: Array<TaxResidence>;
    /**
     * 
     * @type {boolean}
     * @memberof ExternalFisicalTaxConfirmationRequest
     */
    us_person: boolean;
}
/**
 * 
 * @export
 * @interface FatherName
 */
export interface FatherName {
    /**
     * 
     * @type {string}
     * @memberof FatherName
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof FatherName
     */
    value: string;
}
/**
 * 
 * @export
 * @interface Gender
 */
export interface Gender {
    /**
     * 
     * @type {string}
     * @memberof Gender
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Gender
     */
    value: string;
}
/**
 * 
 * @export
 * @interface IdentifierDataRequest
 */
export interface IdentifierDataRequest {
    /**
     * 
     * @type {UserIdentifier}
     * @memberof IdentifierDataRequest
     */
    user_identifier: UserIdentifier;
    /**
     * 
     * @type {Array<TaxResidence>}
     * @memberof IdentifierDataRequest
     */
    tax_residences?: Array<TaxResidence>;
    /**
     * 
     * @type {boolean}
     * @memberof IdentifierDataRequest
     */
    us_person: boolean;
}
/**
 * 
 * @export
 * @interface IdentityNumber
 */
export interface IdentityNumber {
    /**
     * 
     * @type {string}
     * @memberof IdentityNumber
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityNumber
     */
    value: string;
}
/**
 * 
 * @export
 * @interface IdentityType
 */
export interface IdentityType {
    /**
     * 
     * @type {string}
     * @memberof IdentityType
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityType
     */
    value: string;
}
/**
 * 
 * @export
 * @interface Income
 */
export interface Income {
    /**
     * 
     * @type {string}
     * @memberof Income
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof Income
     */
    value: number;
}
/**
 * 
 * @export
 * @interface IsCompanyDirector
 */
export interface IsCompanyDirector {
    /**
     * 
     * @type {string}
     * @memberof IsCompanyDirector
     */
    source: string;
    /**
     * 
     * @type {boolean}
     * @memberof IsCompanyDirector
     */
    value: boolean;
}
/**
 * 
 * @export
 * @interface IsCompanyDirectorOf
 */
export interface IsCompanyDirectorOf {
    /**
     * 
     * @type {string}
     * @memberof IsCompanyDirectorOf
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof IsCompanyDirectorOf
     */
    value: string;
}
/**
 * 
 * @export
 * @interface IsExchangeMember
 */
export interface IsExchangeMember {
    /**
     * 
     * @type {string}
     * @memberof IsExchangeMember
     */
    source: string;
    /**
     * 
     * @type {boolean}
     * @memberof IsExchangeMember
     */
    value: boolean;
}
/**
 * 
 * @export
 * @interface IsPoliticallyExposed
 */
export interface IsPoliticallyExposed {
    /**
     * 
     * @type {string}
     * @memberof IsPoliticallyExposed
     */
    source: string;
    /**
     * 
     * @type {boolean}
     * @memberof IsPoliticallyExposed
     */
    value: boolean;
}
/**
 * 
 * @export
 * @interface Issuer
 */
export interface Issuer {
    /**
     * 
     * @type {string}
     * @memberof Issuer
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Issuer
     */
    value: string;
}
/**
 * 
 * @export
 * @interface Marital
 */
export interface Marital {
    /**
     * 
     * @type {Status}
     * @memberof Marital
     */
    status: Status;
}
/**
 * 
 * @export
 * @interface MotherName
 */
export interface MotherName {
    /**
     * 
     * @type {string}
     * @memberof MotherName
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof MotherName
     */
    value: string;
}
/**
 * 
 * @export
 * @interface Name
 */
export interface Name {
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    value: string;
}
/**
 * 
 * @export
 * @interface Nationality
 */
export interface Nationality {
    /**
     * 
     * @type {string}
     * @memberof Nationality
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof Nationality
     */
    value: number;
}
/**
 * 
 * @export
 * @interface Neighborhood
 */
export interface Neighborhood {
    /**
     * 
     * @type {string}
     * @memberof Neighborhood
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Neighborhood
     */
    value: string;
}
/**
 * 
 * @export
 * @interface NickName
 */
export interface NickName {
    /**
     * 
     * @type {string}
     * @memberof NickName
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof NickName
     */
    value: string;
}
/**
 * 
 * @export
 * @interface Number
 */
export interface Number {
    /**
     * 
     * @type {string}
     * @memberof Number
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Number
     */
    value: string;
}
/**
 * 
 * @export
 * @interface OccupationActivity
 */
export interface OccupationActivity {
    /**
     * 
     * @type {string}
     * @memberof OccupationActivity
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof OccupationActivity
     */
    value: number;
}
/**
 * 
 * @export
 * @interface Patrimony
 */
export interface Patrimony {
    /**
     * 
     * @type {string}
     * @memberof Patrimony
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof Patrimony
     */
    value: number;
}
/**
 * 
 * @export
 * @interface Personal
 */
export interface Personal {
    /**
     * 
     * @type {Name}
     * @memberof Personal
     */
    name: Name;
    /**
     * 
     * @type {NickName}
     * @memberof Personal
     */
    nick_name: NickName;
    /**
     * 
     * @type {BirthDate}
     * @memberof Personal
     */
    birth_date: BirthDate;
    /**
     * 
     * @type {Gender}
     * @memberof Personal
     */
    gender: Gender;
    /**
     * 
     * @type {FatherName}
     * @memberof Personal
     */
    father_name: FatherName;
    /**
     * 
     * @type {MotherName}
     * @memberof Personal
     */
    mother_name: MotherName;
    /**
     * 
     * @type {Email}
     * @memberof Personal
     */
    email: Email;
    /**
     * 
     * @type {Phone}
     * @memberof Personal
     */
    phone: Phone;
    /**
     * 
     * @type {Nationality}
     * @memberof Personal
     */
    nationality: Nationality;
    /**
     * 
     * @type {OccupationActivity}
     * @memberof Personal
     */
    occupation_activity: OccupationActivity;
    /**
     * 
     * @type {Patrimony}
     * @memberof Personal
     */
    patrimony: Patrimony;
    /**
     * 
     * @type {Income}
     * @memberof Personal
     */
    income: Income;
    /**
     * 
     * @type {BirthPlaceCountry}
     * @memberof Personal
     */
    birth_place_country: BirthPlaceCountry;
    /**
     * 
     * @type {BirthPlaceState}
     * @memberof Personal
     */
    birth_place_state: BirthPlaceState;
    /**
     * 
     * @type {BirthPlaceCity}
     * @memberof Personal
     */
    birth_place_city: BirthPlaceCity;
}
/**
 * 
 * @export
 * @interface Phone
 */
export interface Phone {
    /**
     * 
     * @type {string}
     * @memberof Phone
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Phone
     */
    value: string;
}
/**
 * 
 * @export
 * @interface PoliticallyExposedUsRequest
 */
export interface PoliticallyExposedUsRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PoliticallyExposedUsRequest
     */
    is_politically_exposed: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PoliticallyExposedUsRequest
     */
    politically_exposed_names: Array<string>;
}
/**
 * 
 * @export
 * @interface PostIdentifierDocumentRequest
 */
export interface PostIdentifierDocumentRequest {
    /**
     * 
     * @type {string}
     * @memberof PostIdentifierDocumentRequest
     */
    document_front: string;
    /**
     * 
     * @type {string}
     * @memberof PostIdentifierDocumentRequest
     */
    document_back: string;
}
/**
 * 
 * @export
 * @interface PostSelfieRequest
 */
export interface PostSelfieRequest {
    /**
     * 
     * @type {string}
     * @memberof PostSelfieRequest
     */
    device_info: string;
    /**
     * 
     * @type {number}
     * @memberof PostSelfieRequest
     */
    latitude: number;
    /**
     * 
     * @type {number}
     * @memberof PostSelfieRequest
     */
    longitude: number;
    /**
     * 
     * @type {number}
     * @memberof PostSelfieRequest
     */
    precision: number;
    /**
     * 
     * @type {string}
     * @memberof PostSelfieRequest
     */
    ip_address: string;
    /**
     * 
     * @type {string}
     * @memberof PostSelfieRequest
     */
    content: string;
}
/**
 * 
 * @export
 * @interface PutUserReviewRequest
 */
export interface PutUserReviewRequest {
    /**
     * 
     * @type {Personal}
     * @memberof PutUserReviewRequest
     */
    personal: Personal;
    /**
     * 
     * @type {Marital}
     * @memberof PutUserReviewRequest
     */
    marital: Marital;
    /**
     * 
     * @type {Documents}
     * @memberof PutUserReviewRequest
     */
    documents: Documents;
    /**
     * 
     * @type {Address}
     * @memberof PutUserReviewRequest
     */
    address: Address;
}
/**
 * 
 * @export
 * @interface SetElectronicSignatureRequest
 */
export interface SetElectronicSignatureRequest {
    /**
     * 
     * @type {string}
     * @memberof SetElectronicSignatureRequest
     */
    electronic_signature: string;
}
/**
 * 
 * @export
 * @interface Signrequest
 */
export interface Signrequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof Signrequest
     */
    terms_file: Array<string>;
}
/**
 * 
 * @export
 * @interface Spouse
 */
export interface Spouse {
    /**
     * 
     * @type {string}
     * @memberof Spouse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Spouse
     */
    cpf: string;
    /**
     * 
     * @type {number}
     * @memberof Spouse
     */
    nationality: number;
}
/**
 * 
 * @export
 * @interface State
 */
export interface State {
    /**
     * 
     * @type {string}
     * @memberof State
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    value: string;
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof Status
     */
    value: number;
}
/**
 * 
 * @export
 * @interface StreetName
 */
export interface StreetName {
    /**
     * 
     * @type {string}
     * @memberof StreetName
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof StreetName
     */
    value: string;
}
/**
 * 
 * @export
 * @interface Suitabilityrequest
 */
export interface Suitabilityrequest {
    /**
     * 
     * @type {Array<Answer>}
     * @memberof Suitabilityrequest
     */
    answers: Array<Answer>;
}
/**
 * 
 * @export
 * @interface TaxResidence
 */
export interface TaxResidence {
    /**
     * 
     * @type {string}
     * @memberof TaxResidence
     */
    country: string;
    /**
     * 
     * @type {string}
     * @memberof TaxResidence
     */
    tax_number: string;
}
/**
 * 
 * @export
 * @interface TimeExperience
 */
export interface TimeExperience {
    /**
     * 
     * @type {string}
     * @memberof TimeExperience
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof TimeExperience
     */
    value: string;
}
/**
 * 
 * @export
 * @interface UpdateExperienceTimeRequest
 */
export interface UpdateExperienceTimeRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceTimeRequest
     */
    time_experience: string;
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {Personal}
     * @memberof UpdateUserRequest
     */
    personal: Personal;
    /**
     * 
     * @type {Marital}
     * @memberof UpdateUserRequest
     */
    marital: Marital;
    /**
     * 
     * @type {Documents}
     * @memberof UpdateUserRequest
     */
    documents: Documents;
    /**
     * 
     * @type {Address}
     * @memberof UpdateUserRequest
     */
    address: Address;
    /**
     * 
     * @type {ExternalExchangeAccountUs}
     * @memberof UpdateUserRequest
     */
    external_exchange_account_us: ExternalExchangeAccountUs;
}
/**
 * 
 * @export
 * @interface UpdateW8BenRequest
 */
export interface UpdateW8BenRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateW8BenRequest
     */
    w8_form_confirmation: string;
}
/**
 * 
 * @export
 * @interface UserEmployCompanyName
 */
export interface UserEmployCompanyName {
    /**
     * 
     * @type {string}
     * @memberof UserEmployCompanyName
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof UserEmployCompanyName
     */
    value: string;
}
/**
 * 
 * @export
 * @interface UserEmployPosition
 */
export interface UserEmployPosition {
    /**
     * 
     * @type {string}
     * @memberof UserEmployPosition
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof UserEmployPosition
     */
    value: string;
}
/**
 * 
 * @export
 * @interface UserEmployStatus
 */
export interface UserEmployStatus {
    /**
     * 
     * @type {string}
     * @memberof UserEmployStatus
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof UserEmployStatus
     */
    value: string;
}
/**
 * 
 * @export
 * @interface UserEmployType
 */
export interface UserEmployType {
    /**
     * 
     * @type {string}
     * @memberof UserEmployType
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof UserEmployType
     */
    value: string;
}
/**
 * 
 * @export
 * @interface UserIdentifier
 */
export interface UserIdentifier {
    /**
     * 
     * @type {string}
     * @memberof UserIdentifier
     */
    cpf: string;
    /**
     * 
     * @type {string}
     * @memberof UserIdentifier
     */
    phone: string;
}
/**
 * 
 * @export
 * @interface ZipCode
 */
export interface ZipCode {
    /**
     * 
     * @type {string}
     * @memberof ZipCode
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof ZipCode
     */
    value: string;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get_user_data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserData: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/get_user_data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary suitability_questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitabilityQuestions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/suitability/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_suitability
         * @param {Suitabilityrequest} suitabilityrequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSuitability: async (suitabilityrequest: Suitabilityrequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'suitabilityrequest' is not null or undefined
            assertParamExists('updateSuitability', 'suitabilityrequest', suitabilityrequest)
            const localVarPath = `/suitability/profile_update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(suitabilityrequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_user
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (updateUserRequest: UpdateUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserRequest' is not null or undefined
            assertParamExists('updateUser', 'updateUserRequest', updateUserRequest)
            const localVarPath = `/account/update_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get_user_data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserData(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary suitability_questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suitabilityQuestions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suitabilityQuestions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update_suitability
         * @param {Suitabilityrequest} suitabilityrequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSuitability(suitabilityrequest: Suitabilityrequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSuitability(suitabilityrequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update_user
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(updateUserRequest: UpdateUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(updateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @summary get_user_data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserData(options?: any): AxiosPromise<void> {
            return localVarFp.getUserData(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary suitability_questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitabilityQuestions(options?: any): AxiosPromise<void> {
            return localVarFp.suitabilityQuestions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update_suitability
         * @param {Suitabilityrequest} suitabilityrequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSuitability(suitabilityrequest: Suitabilityrequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateSuitability(suitabilityrequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update_user
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(updateUserRequest: UpdateUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateUser(updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @summary get_user_data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getUserData(options?: any) {
        return AccountApiFp(this.configuration).getUserData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary suitability_questions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public suitabilityQuestions(options?: any) {
        return AccountApiFp(this.configuration).suitabilityQuestions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update_suitability
     * @param {Suitabilityrequest} suitabilityrequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public updateSuitability(suitabilityrequest: Suitabilityrequest, options?: any) {
        return AccountApiFp(this.configuration).updateSuitability(suitabilityrequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update_user
     * @param {UpdateUserRequest} updateUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public updateUser(updateUserRequest: UpdateUserRequest, options?: any) {
        return AccountApiFp(this.configuration).updateUser(updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OnboardingBrApi - axios parameter creator
 * @export
 */
export const OnboardingBrApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary complementary_data
         * @param {ComplementaryDataRequest} complementaryDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complementaryData: async (complementaryDataRequest: ComplementaryDataRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'complementaryDataRequest' is not null or undefined
            assertParamExists('complementaryData', 'complementaryDataRequest', complementaryDataRequest)
            const localVarPath = `/onboarding/complementary_data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(complementaryDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create_user
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserRequest: CreateUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequest' is not null or undefined
            assertParamExists('createUser', 'createUserRequest', createUserRequest)
            const localVarPath = `/onboarding/create_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get_user_review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReview: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/onboarding/get_user_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary identifier_data
         * @param {IdentifierDataRequest} identifierDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifierData: async (identifierDataRequest: IdentifierDataRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifierDataRequest' is not null or undefined
            assertParamExists('identifierData', 'identifierDataRequest', identifierDataRequest)
            const localVarPath = `/onboarding/identifier_data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identifierDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary post_selfie
         * @param {PostSelfieRequest} postSelfieRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSelfie: async (postSelfieRequest: PostSelfieRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postSelfieRequest' is not null or undefined
            assertParamExists('postSelfie', 'postSelfieRequest', postSelfieRequest)
            const localVarPath = `/onboarding/post_selfie`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSelfieRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary put_user_review
         * @param {PutUserReviewRequest} putUserReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserReview: async (putUserReviewRequest: PutUserReviewRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'putUserReviewRequest' is not null or undefined
            assertParamExists('putUserReview', 'putUserReviewRequest', putUserReviewRequest)
            const localVarPath = `/onboarding/put_user_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putUserReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary set_electronic_signature
         * @param {SetElectronicSignatureRequest} setElectronicSignatureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setElectronicSignature: async (setElectronicSignatureRequest: SetElectronicSignatureRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'setElectronicSignatureRequest' is not null or undefined
            assertParamExists('setElectronicSignature', 'setElectronicSignatureRequest', setElectronicSignatureRequest)
            const localVarPath = `/onboarding/set_electronic_signature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setElectronicSignatureRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary steps_br
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepsBr: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/onboarding/steps_br`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary suitability
         * @param {Suitabilityrequest} suitabilityrequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitability: async (suitabilityrequest: Suitabilityrequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'suitabilityrequest' is not null or undefined
            assertParamExists('suitability', 'suitabilityrequest', suitabilityrequest)
            const localVarPath = `/onboarding/set_suitability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(suitabilityrequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnboardingBrApi - functional programming interface
 * @export
 */
export const OnboardingBrApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnboardingBrApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary complementary_data
         * @param {ComplementaryDataRequest} complementaryDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complementaryData(complementaryDataRequest: ComplementaryDataRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.complementaryData(complementaryDataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create_user
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserRequest: CreateUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get_user_review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserReview(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserReview(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary identifier_data
         * @param {IdentifierDataRequest} identifierDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identifierData(identifierDataRequest: IdentifierDataRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identifierData(identifierDataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary post_selfie
         * @param {PostSelfieRequest} postSelfieRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSelfie(postSelfieRequest: PostSelfieRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSelfie(postSelfieRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary put_user_review
         * @param {PutUserReviewRequest} putUserReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserReview(putUserReviewRequest: PutUserReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserReview(putUserReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary set_electronic_signature
         * @param {SetElectronicSignatureRequest} setElectronicSignatureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setElectronicSignature(setElectronicSignatureRequest: SetElectronicSignatureRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setElectronicSignature(setElectronicSignatureRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary steps_br
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stepsBr(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stepsBr(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary suitability
         * @param {Suitabilityrequest} suitabilityrequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suitability(suitabilityrequest: Suitabilityrequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suitability(suitabilityrequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnboardingBrApi - factory interface
 * @export
 */
export const OnboardingBrApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnboardingBrApiFp(configuration)
    return {
        /**
         * 
         * @summary complementary_data
         * @param {ComplementaryDataRequest} complementaryDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complementaryData(complementaryDataRequest: ComplementaryDataRequest, options?: any): AxiosPromise<void> {
            return localVarFp.complementaryData(complementaryDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create_user
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUserRequest: CreateUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createUser(createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get_user_review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReview(options?: any): AxiosPromise<void> {
            return localVarFp.getUserReview(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary identifier_data
         * @param {IdentifierDataRequest} identifierDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifierData(identifierDataRequest: IdentifierDataRequest, options?: any): AxiosPromise<void> {
            return localVarFp.identifierData(identifierDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary post_selfie
         * @param {PostSelfieRequest} postSelfieRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSelfie(postSelfieRequest: PostSelfieRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postSelfie(postSelfieRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary put_user_review
         * @param {PutUserReviewRequest} putUserReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserReview(putUserReviewRequest: PutUserReviewRequest, options?: any): AxiosPromise<void> {
            return localVarFp.putUserReview(putUserReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary set_electronic_signature
         * @param {SetElectronicSignatureRequest} setElectronicSignatureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setElectronicSignature(setElectronicSignatureRequest: SetElectronicSignatureRequest, options?: any): AxiosPromise<void> {
            return localVarFp.setElectronicSignature(setElectronicSignatureRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary steps_br
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepsBr(options?: any): AxiosPromise<void> {
            return localVarFp.stepsBr(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary suitability
         * @param {Suitabilityrequest} suitabilityrequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitability(suitabilityrequest: Suitabilityrequest, options?: any): AxiosPromise<void> {
            return localVarFp.suitability(suitabilityrequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnboardingBrApi - object-oriented interface
 * @export
 * @class OnboardingBrApi
 * @extends {BaseAPI}
 */
export class OnboardingBrApi extends BaseAPI {
    /**
     * 
     * @summary complementary_data
     * @param {ComplementaryDataRequest} complementaryDataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrApi
     */
    public complementaryData(complementaryDataRequest: ComplementaryDataRequest, options?: any) {
        return OnboardingBrApiFp(this.configuration).complementaryData(complementaryDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create_user
     * @param {CreateUserRequest} createUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrApi
     */
    public createUser(createUserRequest: CreateUserRequest, options?: any) {
        return OnboardingBrApiFp(this.configuration).createUser(createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get_user_review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrApi
     */
    public getUserReview(options?: any) {
        return OnboardingBrApiFp(this.configuration).getUserReview(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary identifier_data
     * @param {IdentifierDataRequest} identifierDataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrApi
     */
    public identifierData(identifierDataRequest: IdentifierDataRequest, options?: any) {
        return OnboardingBrApiFp(this.configuration).identifierData(identifierDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary post_selfie
     * @param {PostSelfieRequest} postSelfieRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrApi
     */
    public postSelfie(postSelfieRequest: PostSelfieRequest, options?: any) {
        return OnboardingBrApiFp(this.configuration).postSelfie(postSelfieRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary put_user_review
     * @param {PutUserReviewRequest} putUserReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrApi
     */
    public putUserReview(putUserReviewRequest: PutUserReviewRequest, options?: any) {
        return OnboardingBrApiFp(this.configuration).putUserReview(putUserReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary set_electronic_signature
     * @param {SetElectronicSignatureRequest} setElectronicSignatureRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrApi
     */
    public setElectronicSignature(setElectronicSignatureRequest: SetElectronicSignatureRequest, options?: any) {
        return OnboardingBrApiFp(this.configuration).setElectronicSignature(setElectronicSignatureRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary steps_br
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrApi
     */
    public stepsBr(options?: any) {
        return OnboardingBrApiFp(this.configuration).stepsBr(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary suitability
     * @param {Suitabilityrequest} suitabilityrequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrApi
     */
    public suitability(suitabilityrequest: Suitabilityrequest, options?: any) {
        return OnboardingBrApiFp(this.configuration).suitability(suitabilityrequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OnboardingBrEnumsApi - axios parameter creator
 * @export
 */
export const OnboardingBrEnumsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary activity_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityType: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/activity_type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary city
         * @param {string} country 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        city: async (country: string, state: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('city', 'country', country)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('city', 'state', state)
            const localVarPath = `/enum/city`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        country: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary document_issuer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentIssuer: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/document_issuer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary document_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentType: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/document_type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary gender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gender: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/gender`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary marital_status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maritalStatus: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/marital_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary nationality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nationality: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/nationality`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary state
         * @param {string} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        state: async (country: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('state', 'country', country)
            const localVarPath = `/enum/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnboardingBrEnumsApi - functional programming interface
 * @export
 */
export const OnboardingBrEnumsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnboardingBrEnumsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary activity_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityType(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activityType(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary city
         * @param {string} country 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async city(country: string, state: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.city(country, state, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async country(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.country(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary document_issuer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentIssuer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentIssuer(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary document_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentType(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentType(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary gender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gender(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gender(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary marital_status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maritalStatus(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.maritalStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary nationality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nationality(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nationality(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary state
         * @param {string} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async state(country: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.state(country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnboardingBrEnumsApi - factory interface
 * @export
 */
export const OnboardingBrEnumsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnboardingBrEnumsApiFp(configuration)
    return {
        /**
         * 
         * @summary activity_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityType(options?: any): AxiosPromise<void> {
            return localVarFp.activityType(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary city
         * @param {string} country 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        city(country: string, state: string, options?: any): AxiosPromise<void> {
            return localVarFp.city(country, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        country(options?: any): AxiosPromise<void> {
            return localVarFp.country(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary document_issuer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentIssuer(options?: any): AxiosPromise<void> {
            return localVarFp.documentIssuer(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary document_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentType(options?: any): AxiosPromise<void> {
            return localVarFp.documentType(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary gender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gender(options?: any): AxiosPromise<void> {
            return localVarFp.gender(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary marital_status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maritalStatus(options?: any): AxiosPromise<void> {
            return localVarFp.maritalStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary nationality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nationality(options?: any): AxiosPromise<void> {
            return localVarFp.nationality(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary state
         * @param {string} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        state(country: string, options?: any): AxiosPromise<void> {
            return localVarFp.state(country, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnboardingBrEnumsApi - object-oriented interface
 * @export
 * @class OnboardingBrEnumsApi
 * @extends {BaseAPI}
 */
export class OnboardingBrEnumsApi extends BaseAPI {
    /**
     * 
     * @summary activity_type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrEnumsApi
     */
    public activityType(options?: any) {
        return OnboardingBrEnumsApiFp(this.configuration).activityType(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary city
     * @param {string} country 
     * @param {string} state 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrEnumsApi
     */
    public city(country: string, state: string, options?: any) {
        return OnboardingBrEnumsApiFp(this.configuration).city(country, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary country
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrEnumsApi
     */
    public country(options?: any) {
        return OnboardingBrEnumsApiFp(this.configuration).country(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary document_issuer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrEnumsApi
     */
    public documentIssuer(options?: any) {
        return OnboardingBrEnumsApiFp(this.configuration).documentIssuer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary document_type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrEnumsApi
     */
    public documentType(options?: any) {
        return OnboardingBrEnumsApiFp(this.configuration).documentType(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary gender
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrEnumsApi
     */
    public gender(options?: any) {
        return OnboardingBrEnumsApiFp(this.configuration).gender(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary marital_status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrEnumsApi
     */
    public maritalStatus(options?: any) {
        return OnboardingBrEnumsApiFp(this.configuration).maritalStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary nationality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrEnumsApi
     */
    public nationality(options?: any) {
        return OnboardingBrEnumsApiFp(this.configuration).nationality(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary state
     * @param {string} country 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingBrEnumsApi
     */
    public state(country: string, options?: any) {
        return OnboardingBrEnumsApiFp(this.configuration).state(country, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OnboardingGeneralApi - axios parameter creator
 * @export
 */
export const OnboardingGeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary post_identifier_document
         * @param {PostIdentifierDocumentRequest} postIdentifierDocumentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdentifierDocument: async (postIdentifierDocumentRequest: PostIdentifierDocumentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postIdentifierDocumentRequest' is not null or undefined
            assertParamExists('postIdentifierDocument', 'postIdentifierDocumentRequest', postIdentifierDocumentRequest)
            const localVarPath = `/onboarding/post_identifier_document`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postIdentifierDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnboardingGeneralApi - functional programming interface
 * @export
 */
export const OnboardingGeneralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnboardingGeneralApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary post_identifier_document
         * @param {PostIdentifierDocumentRequest} postIdentifierDocumentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIdentifierDocument(postIdentifierDocumentRequest: PostIdentifierDocumentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIdentifierDocument(postIdentifierDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnboardingGeneralApi - factory interface
 * @export
 */
export const OnboardingGeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnboardingGeneralApiFp(configuration)
    return {
        /**
         * 
         * @summary post_identifier_document
         * @param {PostIdentifierDocumentRequest} postIdentifierDocumentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdentifierDocument(postIdentifierDocumentRequest: PostIdentifierDocumentRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postIdentifierDocument(postIdentifierDocumentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnboardingGeneralApi - object-oriented interface
 * @export
 * @class OnboardingGeneralApi
 * @extends {BaseAPI}
 */
export class OnboardingGeneralApi extends BaseAPI {
    /**
     * 
     * @summary post_identifier_document
     * @param {PostIdentifierDocumentRequest} postIdentifierDocumentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingGeneralApi
     */
    public postIdentifierDocument(postIdentifierDocumentRequest: PostIdentifierDocumentRequest, options?: any) {
        return OnboardingGeneralApiFp(this.configuration).postIdentifierDocument(postIdentifierDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OnboardingTermsApi - axios parameter creator
 * @export
 */
export const OnboardingTermsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary current
         * @param {string} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        current: async (fileType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('current', 'fileType', fileType)
            const localVarPath = `/term/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileType !== undefined) {
                localVarQueryParameter['file_type'] = fileType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sign
         * @param {Signrequest} signrequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign: async (signrequest: Signrequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'signrequest' is not null or undefined
            assertParamExists('sign', 'signrequest', signrequest)
            const localVarPath = `/term/sign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signrequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signed_term
         * @param {string} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signedTerm: async (fileType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('signedTerm', 'fileType', fileType)
            const localVarPath = `/term/signed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileType !== undefined) {
                localVarQueryParameter['file_type'] = fileType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnboardingTermsApi - functional programming interface
 * @export
 */
export const OnboardingTermsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnboardingTermsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary current
         * @param {string} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async current(fileType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.current(fileType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sign
         * @param {Signrequest} signrequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sign(signrequest: Signrequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sign(signrequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary signed_term
         * @param {string} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signedTerm(fileType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signedTerm(fileType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnboardingTermsApi - factory interface
 * @export
 */
export const OnboardingTermsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnboardingTermsApiFp(configuration)
    return {
        /**
         * 
         * @summary current
         * @param {string} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        current(fileType: string, options?: any): AxiosPromise<void> {
            return localVarFp.current(fileType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sign
         * @param {Signrequest} signrequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(signrequest: Signrequest, options?: any): AxiosPromise<void> {
            return localVarFp.sign(signrequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary signed_term
         * @param {string} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signedTerm(fileType: string, options?: any): AxiosPromise<void> {
            return localVarFp.signedTerm(fileType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnboardingTermsApi - object-oriented interface
 * @export
 * @class OnboardingTermsApi
 * @extends {BaseAPI}
 */
export class OnboardingTermsApi extends BaseAPI {
    /**
     * 
     * @summary current
     * @param {string} fileType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingTermsApi
     */
    public current(fileType: string, options?: any) {
        return OnboardingTermsApiFp(this.configuration).current(fileType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sign
     * @param {Signrequest} signrequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingTermsApi
     */
    public sign(signrequest: Signrequest, options?: any) {
        return OnboardingTermsApiFp(this.configuration).sign(signrequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary signed_term
     * @param {string} fileType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingTermsApi
     */
    public signedTerm(fileType: string, options?: any) {
        return OnboardingTermsApiFp(this.configuration).signedTerm(fileType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OnboardingUsApi - axios parameter creator
 * @export
 */
export const OnboardingUsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary broker_member
         * @param {BrokerMemberRequest} brokerMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brokerMember: async (brokerMemberRequest: BrokerMemberRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'brokerMemberRequest' is not null or undefined
            assertParamExists('brokerMember', 'brokerMemberRequest', brokerMemberRequest)
            const localVarPath = `/onboarding/broker_member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(brokerMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary company_director_us
         * @param {CompanyDirectorUsRequest} companyDirectorUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyDirectorUs: async (companyDirectorUsRequest: CompanyDirectorUsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDirectorUsRequest' is not null or undefined
            assertParamExists('companyDirectorUs', 'companyDirectorUsRequest', companyDirectorUsRequest)
            const localVarPath = `/onboarding/company_director_us`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyDirectorUsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary employ_for_us
         * @param {EmployForUsRequest} employForUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employForUs: async (employForUsRequest: EmployForUsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'employForUsRequest' is not null or undefined
            assertParamExists('employForUs', 'employForUsRequest', employForUsRequest)
            const localVarPath = `/onboarding/employ_for_us`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employForUsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary external_fiscal_tax_residences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalFiscalTaxResidences: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/external_fiscal_tax_residences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary external_fisical_tax_confirmation
         * @param {ExternalFisicalTaxConfirmationRequest} externalFisicalTaxConfirmationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalFisicalTaxConfirmation: async (externalFisicalTaxConfirmationRequest: ExternalFisicalTaxConfirmationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalFisicalTaxConfirmationRequest' is not null or undefined
            assertParamExists('externalFisicalTaxConfirmation', 'externalFisicalTaxConfirmationRequest', externalFisicalTaxConfirmationRequest)
            const localVarPath = `/onboarding/external_fiscal_tax_confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalFisicalTaxConfirmationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get_w8_ben
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getW8Ben: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/onboarding/get_w8_ben`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary politically_exposed_us
         * @param {PoliticallyExposedUsRequest} politicallyExposedUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        politicallyExposedUs: async (politicallyExposedUsRequest: PoliticallyExposedUsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'politicallyExposedUsRequest' is not null or undefined
            assertParamExists('politicallyExposedUs', 'politicallyExposedUsRequest', politicallyExposedUsRequest)
            const localVarPath = `/onboarding/politically_exposed_us`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(politicallyExposedUsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary step_us
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepUs: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/onboarding/steps_us`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_experience_time
         * @param {UpdateExperienceTimeRequest} updateExperienceTimeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExperienceTime: async (updateExperienceTimeRequest: UpdateExperienceTimeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateExperienceTimeRequest' is not null or undefined
            assertParamExists('updateExperienceTime', 'updateExperienceTimeRequest', updateExperienceTimeRequest)
            const localVarPath = `/onboarding/update_experience_time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExperienceTimeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_w8_ben
         * @param {UpdateW8BenRequest} updateW8BenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateW8Ben: async (updateW8BenRequest: UpdateW8BenRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateW8BenRequest' is not null or undefined
            assertParamExists('updateW8Ben', 'updateW8BenRequest', updateW8BenRequest)
            const localVarPath = `/onboarding/update_w8_ben`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateW8BenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnboardingUsApi - functional programming interface
 * @export
 */
export const OnboardingUsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnboardingUsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary broker_member
         * @param {BrokerMemberRequest} brokerMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brokerMember(brokerMemberRequest: BrokerMemberRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brokerMember(brokerMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary company_director_us
         * @param {CompanyDirectorUsRequest} companyDirectorUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyDirectorUs(companyDirectorUsRequest: CompanyDirectorUsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyDirectorUs(companyDirectorUsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary employ_for_us
         * @param {EmployForUsRequest} employForUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employForUs(employForUsRequest: EmployForUsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employForUs(employForUsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary external_fiscal_tax_residences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async externalFiscalTaxResidences(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.externalFiscalTaxResidences(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary external_fisical_tax_confirmation
         * @param {ExternalFisicalTaxConfirmationRequest} externalFisicalTaxConfirmationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async externalFisicalTaxConfirmation(externalFisicalTaxConfirmationRequest: ExternalFisicalTaxConfirmationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.externalFisicalTaxConfirmation(externalFisicalTaxConfirmationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get_w8_ben
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getW8Ben(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getW8Ben(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary politically_exposed_us
         * @param {PoliticallyExposedUsRequest} politicallyExposedUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async politicallyExposedUs(politicallyExposedUsRequest: PoliticallyExposedUsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.politicallyExposedUs(politicallyExposedUsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary step_us
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stepUs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stepUs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update_experience_time
         * @param {UpdateExperienceTimeRequest} updateExperienceTimeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExperienceTime(updateExperienceTimeRequest: UpdateExperienceTimeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExperienceTime(updateExperienceTimeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update_w8_ben
         * @param {UpdateW8BenRequest} updateW8BenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateW8Ben(updateW8BenRequest: UpdateW8BenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateW8Ben(updateW8BenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnboardingUsApi - factory interface
 * @export
 */
export const OnboardingUsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnboardingUsApiFp(configuration)
    return {
        /**
         * 
         * @summary broker_member
         * @param {BrokerMemberRequest} brokerMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brokerMember(brokerMemberRequest: BrokerMemberRequest, options?: any): AxiosPromise<void> {
            return localVarFp.brokerMember(brokerMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary company_director_us
         * @param {CompanyDirectorUsRequest} companyDirectorUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyDirectorUs(companyDirectorUsRequest: CompanyDirectorUsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.companyDirectorUs(companyDirectorUsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary employ_for_us
         * @param {EmployForUsRequest} employForUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employForUs(employForUsRequest: EmployForUsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.employForUs(employForUsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary external_fiscal_tax_residences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalFiscalTaxResidences(options?: any): AxiosPromise<void> {
            return localVarFp.externalFiscalTaxResidences(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary external_fisical_tax_confirmation
         * @param {ExternalFisicalTaxConfirmationRequest} externalFisicalTaxConfirmationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalFisicalTaxConfirmation(externalFisicalTaxConfirmationRequest: ExternalFisicalTaxConfirmationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.externalFisicalTaxConfirmation(externalFisicalTaxConfirmationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get_w8_ben
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getW8Ben(options?: any): AxiosPromise<void> {
            return localVarFp.getW8Ben(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary politically_exposed_us
         * @param {PoliticallyExposedUsRequest} politicallyExposedUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        politicallyExposedUs(politicallyExposedUsRequest: PoliticallyExposedUsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.politicallyExposedUs(politicallyExposedUsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary step_us
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepUs(options?: any): AxiosPromise<void> {
            return localVarFp.stepUs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update_experience_time
         * @param {UpdateExperienceTimeRequest} updateExperienceTimeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExperienceTime(updateExperienceTimeRequest: UpdateExperienceTimeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateExperienceTime(updateExperienceTimeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update_w8_ben
         * @param {UpdateW8BenRequest} updateW8BenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateW8Ben(updateW8BenRequest: UpdateW8BenRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateW8Ben(updateW8BenRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnboardingUsApi - object-oriented interface
 * @export
 * @class OnboardingUsApi
 * @extends {BaseAPI}
 */
export class OnboardingUsApi extends BaseAPI {
    /**
     * 
     * @summary broker_member
     * @param {BrokerMemberRequest} brokerMemberRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsApi
     */
    public brokerMember(brokerMemberRequest: BrokerMemberRequest, options?: any) {
        return OnboardingUsApiFp(this.configuration).brokerMember(brokerMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary company_director_us
     * @param {CompanyDirectorUsRequest} companyDirectorUsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsApi
     */
    public companyDirectorUs(companyDirectorUsRequest: CompanyDirectorUsRequest, options?: any) {
        return OnboardingUsApiFp(this.configuration).companyDirectorUs(companyDirectorUsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary employ_for_us
     * @param {EmployForUsRequest} employForUsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsApi
     */
    public employForUs(employForUsRequest: EmployForUsRequest, options?: any) {
        return OnboardingUsApiFp(this.configuration).employForUs(employForUsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary external_fiscal_tax_residences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsApi
     */
    public externalFiscalTaxResidences(options?: any) {
        return OnboardingUsApiFp(this.configuration).externalFiscalTaxResidences(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary external_fisical_tax_confirmation
     * @param {ExternalFisicalTaxConfirmationRequest} externalFisicalTaxConfirmationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsApi
     */
    public externalFisicalTaxConfirmation(externalFisicalTaxConfirmationRequest: ExternalFisicalTaxConfirmationRequest, options?: any) {
        return OnboardingUsApiFp(this.configuration).externalFisicalTaxConfirmation(externalFisicalTaxConfirmationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get_w8_ben
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsApi
     */
    public getW8Ben(options?: any) {
        return OnboardingUsApiFp(this.configuration).getW8Ben(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary politically_exposed_us
     * @param {PoliticallyExposedUsRequest} politicallyExposedUsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsApi
     */
    public politicallyExposedUs(politicallyExposedUsRequest: PoliticallyExposedUsRequest, options?: any) {
        return OnboardingUsApiFp(this.configuration).politicallyExposedUs(politicallyExposedUsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary step_us
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsApi
     */
    public stepUs(options?: any) {
        return OnboardingUsApiFp(this.configuration).stepUs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update_experience_time
     * @param {UpdateExperienceTimeRequest} updateExperienceTimeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsApi
     */
    public updateExperienceTime(updateExperienceTimeRequest: UpdateExperienceTimeRequest, options?: any) {
        return OnboardingUsApiFp(this.configuration).updateExperienceTime(updateExperienceTimeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update_w8_ben
     * @param {UpdateW8BenRequest} updateW8BenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsApi
     */
    public updateW8Ben(updateW8BenRequest: UpdateW8BenRequest, options?: any) {
        return OnboardingUsApiFp(this.configuration).updateW8Ben(updateW8BenRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OnboardingUsEnumApi - axios parameter creator
 * @export
 */
export const OnboardingUsEnumApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary employ_status_us
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employStatusUs: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/employ_status_us`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get_employ_positions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployPositions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/get_employ_positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get_employ_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployType: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/get_employ_type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary time_experience
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeExperience: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/experience_time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnboardingUsEnumApi - functional programming interface
 * @export
 */
export const OnboardingUsEnumApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnboardingUsEnumApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary employ_status_us
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employStatusUs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employStatusUs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get_employ_positions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployPositions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployPositions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get_employ_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployType(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployType(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary time_experience
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timeExperience(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timeExperience(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnboardingUsEnumApi - factory interface
 * @export
 */
export const OnboardingUsEnumApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnboardingUsEnumApiFp(configuration)
    return {
        /**
         * 
         * @summary employ_status_us
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employStatusUs(options?: any): AxiosPromise<void> {
            return localVarFp.employStatusUs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get_employ_positions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployPositions(options?: any): AxiosPromise<void> {
            return localVarFp.getEmployPositions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get_employ_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployType(options?: any): AxiosPromise<void> {
            return localVarFp.getEmployType(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary time_experience
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeExperience(options?: any): AxiosPromise<void> {
            return localVarFp.timeExperience(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnboardingUsEnumApi - object-oriented interface
 * @export
 * @class OnboardingUsEnumApi
 * @extends {BaseAPI}
 */
export class OnboardingUsEnumApi extends BaseAPI {
    /**
     * 
     * @summary employ_status_us
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsEnumApi
     */
    public employStatusUs(options?: any) {
        return OnboardingUsEnumApiFp(this.configuration).employStatusUs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get_employ_positions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsEnumApi
     */
    public getEmployPositions(options?: any) {
        return OnboardingUsEnumApiFp(this.configuration).getEmployPositions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get_employ_type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsEnumApi
     */
    public getEmployType(options?: any) {
        return OnboardingUsEnumApiFp(this.configuration).getEmployType(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary time_experience
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingUsEnumApi
     */
    public timeExperience(options?: any) {
        return OnboardingUsEnumApiFp(this.configuration).timeExperience(options).then((request) => request(this.axios, this.basePath));
    }
}


